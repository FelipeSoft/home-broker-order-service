// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: limit_order_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LimitOrderService_BuyOrderByLimitValue_FullMethodName  = "/limit_order_service.LimitOrderService/BuyOrderByLimitValue"
	LimitOrderService_SellOrderByLimitValue_FullMethodName = "/limit_order_service.LimitOrderService/SellOrderByLimitValue"
)

// LimitOrderServiceClient is the client API for LimitOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LimitOrderServiceClient interface {
	BuyOrderByLimitValue(ctx context.Context, in *BuyOrderByLimitValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SellOrderByLimitValue(ctx context.Context, in *SellOrderByLimitValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type limitOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLimitOrderServiceClient(cc grpc.ClientConnInterface) LimitOrderServiceClient {
	return &limitOrderServiceClient{cc}
}

func (c *limitOrderServiceClient) BuyOrderByLimitValue(ctx context.Context, in *BuyOrderByLimitValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LimitOrderService_BuyOrderByLimitValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitOrderServiceClient) SellOrderByLimitValue(ctx context.Context, in *SellOrderByLimitValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LimitOrderService_SellOrderByLimitValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LimitOrderServiceServer is the server API for LimitOrderService service.
// All implementations must embed UnimplementedLimitOrderServiceServer
// for forward compatibility.
type LimitOrderServiceServer interface {
	BuyOrderByLimitValue(context.Context, *BuyOrderByLimitValueRequest) (*emptypb.Empty, error)
	SellOrderByLimitValue(context.Context, *SellOrderByLimitValueRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLimitOrderServiceServer()
}

// UnimplementedLimitOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLimitOrderServiceServer struct{}

func (UnimplementedLimitOrderServiceServer) BuyOrderByLimitValue(context.Context, *BuyOrderByLimitValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyOrderByLimitValue not implemented")
}
func (UnimplementedLimitOrderServiceServer) SellOrderByLimitValue(context.Context, *SellOrderByLimitValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellOrderByLimitValue not implemented")
}
func (UnimplementedLimitOrderServiceServer) mustEmbedUnimplementedLimitOrderServiceServer() {}
func (UnimplementedLimitOrderServiceServer) testEmbeddedByValue()                           {}

// UnsafeLimitOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LimitOrderServiceServer will
// result in compilation errors.
type UnsafeLimitOrderServiceServer interface {
	mustEmbedUnimplementedLimitOrderServiceServer()
}

func RegisterLimitOrderServiceServer(s grpc.ServiceRegistrar, srv LimitOrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedLimitOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LimitOrderService_ServiceDesc, srv)
}

func _LimitOrderService_BuyOrderByLimitValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyOrderByLimitValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitOrderServiceServer).BuyOrderByLimitValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitOrderService_BuyOrderByLimitValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitOrderServiceServer).BuyOrderByLimitValue(ctx, req.(*BuyOrderByLimitValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitOrderService_SellOrderByLimitValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellOrderByLimitValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitOrderServiceServer).SellOrderByLimitValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitOrderService_SellOrderByLimitValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitOrderServiceServer).SellOrderByLimitValue(ctx, req.(*SellOrderByLimitValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LimitOrderService_ServiceDesc is the grpc.ServiceDesc for LimitOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LimitOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "limit_order_service.LimitOrderService",
	HandlerType: (*LimitOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuyOrderByLimitValue",
			Handler:    _LimitOrderService_BuyOrderByLimitValue_Handler,
		},
		{
			MethodName: "SellOrderByLimitValue",
			Handler:    _LimitOrderService_SellOrderByLimitValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "limit_order_service.proto",
}
